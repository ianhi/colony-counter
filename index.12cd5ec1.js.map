{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-006602a9d443d198.js","node_modules/@parcel/runtime-js/lib/runtime-931c9048472ee8c3.js","src/main.ts"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"aT88m\\\":\\\"index.12cd5ec1.js\\\",\\\"NIq5X\\\":\\\"colonies.33cec3db.png\\\"}\"));","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"NIq5X\")).toString();","/* eslint-disable @typescript-eslint/ban-ts-comment */\nconst imageUrl = new URL('colonies.png', import.meta.url);\nfunction arrayToCsv(data: number[][]): string {\n  return data\n    .map(\n      (row) =>\n        row\n          .map(String) // convert every value to String\n          .map((v) => `\"${v}\"`) // quote it\n          .join(',') // comma-separated\n    )\n    .join('\\n'); // rows starting on new lines\n}\n\nclass DrawingApp {\n  private imgCanvas: HTMLCanvasElement;\n  private pointCanvas: HTMLCanvasElement;\n  private imgContext: CanvasRenderingContext2D;\n  private pointContext: CanvasRenderingContext2D;\n  private img: HTMLImageElement;\n  private pointRadius: number;\n\n  private clicks: number[][] = [];\n\n  private colonyCount = 0;\n  private colonyCountDisplay: HTMLElement;\n\n  constructor() {\n    this.imgCanvas = document.getElementById('imgCanvas') as HTMLCanvasElement;\n    this.pointCanvas = document.getElementById(\n      'pointCanvas'\n    ) as HTMLCanvasElement;\n    this.imgContext = this.imgCanvas.getContext('2d');\n    this.pointContext = this.pointCanvas.getContext('2d');\n\n    this.pointContext.lineCap = 'round';\n    this.pointContext.lineJoin = 'round';\n    this.pointContext.fillStyle = 'rgba(255, 0, 0, 0.75)';\n    this.pointContext.lineWidth = 2;\n\n    this.pointRadius = 4;\n    console.log('here? 1');\n\n    this.colonyCountDisplay = document.getElementById('colonyCounter');\n\n    this.img = new Image();\n    this.img.onload = (): void => {\n      // TODO some sort of resizing to prevent clicking outside of the image\n      // maybe have a maxmimum image size and possibly shrink in either of the directions\n\n      // this.resize_canvases(`${this.img.width}px`, `${this.img.height}px`);\n      this.drawImageScaled();\n    };\n    // @ts-ignore\n    this.img.src = imageUrl;\n    this.drawImageScaled();\n    console.log('here?');\n\n    this.createUserEvents();\n  }\n\n  private createUserEvents(): void {\n    const canvas = this.pointCanvas;\n\n    canvas.addEventListener('mousedown', this.pressEventHandler);\n    // canvas.addEventListener('touchstart', this.pressEventHandler);\n\n    document\n      .getElementById('clear')\n      .addEventListener('click', this.clearEventHandler);\n\n    const fileUpload = document.getElementById('file-upload');\n    document.getElementById('img-upload').addEventListener('click', () => {\n      fileUpload.click();\n    });\n    fileUpload.addEventListener('input', this.newImg);\n\n    document.getElementById('img-save').addEventListener('click', () => {\n      alert('not implemented yet sorry!');\n    });\n\n    document.getElementById('csv-save').addEventListener('click', () => {\n      const url = URL.createObjectURL(\n        new Blob([arrayToCsv(this.clicks)], { type: 'text/csv;charset=utf-8;' })\n      );\n\n      // Create a link to download it\n      const down = document.createElement('a');\n      down.href = url;\n      down.setAttribute('download', 'points.csv');\n      down.click();\n      // should somehow destroy the created link?\n    });\n\n    document\n      .getElementById('point-size-slider')\n      .addEventListener('input', (e) => {\n        this.pointRadius = (e.target as HTMLInputElement)\n          .value as unknown as number;\n        this.redrawPoints();\n      });\n    document\n      .getElementById('point-alpha-slider')\n      .addEventListener('input', (e) => {\n        const alpha = (e.target as HTMLInputElement).value as unknown as number;\n        this.pointContext.fillStyle = `rgba(255, 0, 0, ${alpha}`;\n        this.redrawPoints();\n      });\n  }\n\n  // private resize_canvases(width: string, height: string): void {\n  //   this.imgCanvas.setAttribute('width', width);\n  //   this.imgCanvas.setAttribute('height', height);\n  //   this.pointCanvas.setAttribute('width', width);\n  //   this.pointCanvas.setAttribute('height', height);\n  // }\n\n  private drawImageScaled(): void {\n    const canvas = this.imgCanvas;\n    this.imgContext.clearRect(0, 0, canvas.width, canvas.height);\n    const img = this.img;\n    const hRatio = canvas.width / img.width;\n    const vRatio = canvas.height / img.height;\n    const ratio = Math.min(hRatio, vRatio);\n    const shiftX = (canvas.width - img.width * ratio) / 2;\n    const shiftY = (canvas.height - img.height * ratio) / 2;\n    this.imgContext.drawImage(\n      img,\n      0,\n      0,\n      img.width,\n      img.height,\n      shiftX,\n      shiftY,\n      img.width * ratio,\n      img.height * ratio\n    );\n  }\n\n  private redrawPoints(): void {\n    this.pointContext.clearRect(\n      0,\n      0,\n      this.pointCanvas.width,\n      this.pointCanvas.height\n    );\n    this.clicks.map((click) => {\n      this.drawPoint(click[0], click[1]);\n    });\n  }\n\n  private drawPoint(x: number, y: number): void {\n    this.pointContext.beginPath();\n    this.pointContext.arc(x, y, this.pointRadius, 0, 2 * Math.PI);\n    this.pointContext.fill();\n    this.pointContext.closePath();\n  }\n\n  private addClick(x: number, y: number): void {\n    this.clicks.push([x, y]);\n    this.colonyCount++;\n    this.updateCounterDisplay();\n    this.drawPoint(x, y);\n  }\n\n  private updateCounterDisplay(): void {\n    this.colonyCountDisplay.innerHTML =\n      'Colony Count : ' + this.colonyCount.toString();\n  }\n\n  private clearPoints(): void {\n    this.pointContext.clearRect(\n      0,\n      0,\n      this.pointCanvas.width,\n      this.pointCanvas.height\n    );\n    this.clicks = [];\n  }\n\n  private clearEventHandler = (): void => {\n    this.clearPoints();\n  };\n\n  private pressEventHandler = (e: MouseEvent): void => {\n    const mouseX = e.offsetX - this.pointCanvas.offsetLeft;\n    const mouseY = e.offsetY - this.pointCanvas.offsetTop;\n\n    this.addClick(mouseX, mouseY);\n  };\n\n  // gross any - couldn't figure it out :(\n  private newImg = (e: any): void => {\n    const reader = new FileReader();\n\n    reader.addEventListener(\n      'load',\n      () => {\n        this.img.src = reader.result as string;\n      },\n      false\n    );\n    reader.readAsDataURL((e.target as HTMLInputElement).files[0]);\n  };\n}\n\nnew DrawingApp();\n"],"names":["$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$97722625210c3269$exports","URL","resolve","import","meta","url","toString","$ad2bcec7a0192558$var$imageUrl","this","clicks","colonyCount","clearEventHandler","clearPoints","pressEventHandler","e","mouseX","offsetX","pointCanvas","offsetLeft","mouseY","offsetY","offsetTop","addClick","newImg","reader","FileReader","addEventListener","img","src","result","readAsDataURL","target","files","imgCanvas","document","getElementById","imgContext","getContext","pointContext","lineCap","lineJoin","fillStyle","lineWidth","pointRadius","console","log","colonyCountDisplay","Image","onload","drawImageScaled","createUserEvents","fileUpload","click","alert","createObjectURL","Blob","data","map","row","String","v","join","type","down","createElement","href","setAttribute","value","redrawPoints","alpha","canvas","clearRect","width","height","hRatio","vRatio","ratio","Math","min","shiftX","shiftY","drawImage","drawPoint","x","y","beginPath","arc","PI","fill","closePath","push","updateCounterDisplay","innerHTML"],"version":3,"file":"index.12cd5ec1.js.map"}